import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import Standardscale
from sklearn.linear_model import LogisticRegression 
from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestClassifier



df=pd.read_csv('')
df.head()
df.info()
df.describe()
df.shape
df.isnull().sum()
df[index number].value_counts()
df.groupby(index number).mean()
X= df.drop(column=60,axis=1)
Y=df[60]
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.1,Stratify=Y,random_state=1)
X_train.shape,X_test.shape
model training:
model = LogisticRegression()
model.fit(X_train,Y_train)
model evaluation 
accuracy on training data
pre=model.predict(x_train)
training_data_accuracy=accuracy_score(pre,Y_train)

model=Randomforestclassifier()
model.fit(X_test,Y_test)
pre=model.predict(X_test)
acc=accuracy_score(pre,Y_test)

input_data=()
i=np.asarray(input_data)
i_reshape=i.reshape(1,-1)
prediction=model.predict(i_reshape)
print(prediction)
if(prediction[0] =='R')
  print()
else:
print()



# Correlation matrix to measure linear relationships
correlation_matrix = data[['mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 
'acceleration']].corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.show()
# Boxplot to visualize the distribution of 'mpg' based on 'origin'
sns.boxplot(x='origin', y='mpg', data=data)
plt.show()



# Countplot for 'cylinders' to observe the distribution of cylinder values
sns.countplot(x='cylinders', data=data)
plt.show()
# Distribution plot for 'mpg'
sns.histplot(data['mpg'], kde=True, bins=20)
plt.show()

imputer=KNNImputer(n_neighbors=2)
data['mpg']=imputer.fit_transform(data['mpg'])


correlation= df.corr()
plot=plt.figure(figsize=(10,10))
sns.heatmap(correlation,cbar=True,square=true,annot=true,annot_kws=('size':8),cmap=true,fmt='.1f')
from sklearn.metrics import confusion_matrix 
y_pred = model.predict(x_test) 
cm = confusion_matrix(y_test, y_pred) 
cm
sns.heatmap(cm,annot=True)


mean and mode 

df['LoanAmount'] = df['LoanAmount'].fillna(df['LoanAmount'].mean())
# fill the missing values for categorical terms - mode
df['Gender'] = df["Gender"].fillna(df['Gender'].mode()[0])
log transformation
df['ApplicantIncomeLog'] = np.log(df['ApplicantIncome']+1)
sns.distplot(df["ApplicantIncomeLog"])





